def c_n_by_k(n: int, k: int) -> int:    """    Calculate the binomial coefficient    :param n: (int) The total number of items.    :param k: (int) The number of items to choose.    :return int: The binomial coefficient "n choose k".    """    c = 1    for i in range(k):        c = c * (n - i) // (i + 1)    return cdef amount_of_power(up_lim: int, k_b: int, base: int) -> int:    """    Calculate the number of integers up to N    that contain K 1's in its base-B representation.    :param up_lim: (int) The upper limit of the range.    :param k_b: (int) The number of 1's to be present in the base-B    :param base: (int) The base of the representation.    :return int: The count of integers satisfying the conditions.    """    if up_lim < base:        return 1 if (k_b <= 1 and up_lim > 0) or (                    up_lim == 0 and k_b == 0) else 0    p, k = 1, 0    while p * base <= up_lim:        p *= base        k += 1    if up_lim // p >= 2:        return c_n_by_k(k, k_b - 1) + (c_n_by_k(k, k_b) if k_b else 0)    elif up_lim // p == 1:        return c_n_by_k(k, k_b) + (            amount_of_power(up_lim - p, k_b - 1, base) if k_b else 0)X, Y = map(int, input().split())K = int(input())B = int(input())print(amount_of_power(Y, K, B) - amount_of_power(X - 1, K, B))