class Point:    def __init__(self, x=0, y=0):        self.x = x        self.y = y    def __sub__(self, p):        return Point(self.x - p.x, self.y - p.y)    def cross_product(self, p):        return p.x * self.y - p.y * self.xdef straddles(u, v1, v2):    a = u.cross_product(v1)    b = u.cross_product(v2)    return (a >= 0 and b <= 0 or a <= 0 and b >= 0) and (a != 0 or b != 0)def intersect(u1, u2, v):    return (u2 - u1).cross_product(        v - u1) == 0 and u1.x <= v.x <= u2.x and u1.y <= v.y <= u2.ydef segments_intersect(u1, u2, v1, v2):    return straddles(u2 - u1, v1 - u1, v2 - u1) and straddles(v2 - v1, u1 - v1,                                                              u2 - v1)A = [[False] * 201 for _ in range(201)]nodes = [None] * 201lines = []class Node:    def __init__(self, p):        self.p = p        self.visited = False        self.neighbors = []def connect(a, b):    A[a][b] = A[b][a] = Truedef dfs(node):    node.visited = True    for n in node.neighbors:        if not n.visited:            dfs(n)def main():    global nodes    n, m = map(int, input().split())    nodes = [None] * (n + 1)  # Proper initialization of nodes list    for l in range(1, n + 1):        x, y = map(int, input().split())        nodes[l] = Node(Point(x, y))    for _ in range(m):        i, j = map(int, input().split())        connect(i, j)        for a, b in lines:            if segments_intersect(a.p, b.p, nodes[i].p, nodes[j].p):                ai, bi = nodes.index(a), nodes.index(b)                connect(ai, i)                connect(bi, i)                connect(ai, j)                connect(bi, j)        for k in range(1, n + 1):            if intersect(nodes[i].p, nodes[j].p, nodes[k].p):                connect(i, k)                connect(j, k)        lines.append((nodes[i], nodes[j]))    for i in range(1, n + 1):        for j in range(1, n + 1):            if A[i][j] and i != j:                nodes[i].neighbors.append(nodes[j])    nodes[1].visited = True    dfs(nodes[1])    for node in nodes[1:]:        if not node.visited:            print("NO")            return    print("YES")if __name__ == "__main__":    main()