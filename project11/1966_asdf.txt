class Coord:    def __init__(self, x: int = 0, y: int = 0) -> None:        self.x = x        self.y = y    def __sub__(self, other):        return Coord(self.x - other.x, self.y - other.y)    def cr_pr(self, other) -> int:        return self.x * other.y - self.y * other.xdef seg_strag(u, v1, v2) -> bool:    a_c = u.cr_pr(v1)    b_c = u.cr_pr(v2)    return (a_c >= 0 >= b_c or a_c <= 0 <= b_c) and (a_c != 0 or b_c != 0)def seg_int(u1, u2, v) -> bool:    if (u2 - u1).cr_pr(v - u1) == 0 and \            min(u1.x, u2.x) <= v.x <= max(u1.x, u2.x) and \            min(u1.y, u2.y) <= v.y <= max(u1.y, u2.y):        return True    return Falsedef set_strag_seg_int(u1, u2, v1, v2) -> bool:    return seg_strag(u2 - u1, v1 - u1, v2 - u1) and \        seg_strag(v2 - v1, u1 - v1, u2 - v1)class Node:    def __init__(self, p) -> None:        self.p = p        self.visited = False        self.neighbors = []def connect(f_index: int, s_index: int) -> None:    adjacency_matrix[f_index][s_index] = adjacency_matrix[s_index][        f_index] = Truedef depth_f(node) -> None:    node.visited = True    for neighbor in node.neighbors:        if not neighbor.visited:            depth_f(neighbor)# Main programnum_nodes, num_edges = map(int, input().split())vertices = [None] + [Node(Coord(*map(int, input().split()))) for _ in                     range(num_nodes)]adjacency_matrix = [[False] * (num_nodes + 1) for _ in range(num_nodes + 1)]edges = []for _ in range(num_edges):    start, end = map(int, input().split())    connect(start, end)    for vertex_a, vertex_b in edges:        if set_strag_seg_int(vertex_a.p, vertex_b.p, vertices[start].p,                             vertices[end].p):            index_a, index_b = vertices.index(vertex_a), vertices.index(                vertex_b)            adjacency_matrix[index_a][start] = adjacency_matrix[start][                index_a] = adjacency_matrix[index_b][start] = \                adjacency_matrix[start][index_b] = True            adjacency_matrix[index_a][end] = adjacency_matrix[end][index_a] = \                adjacency_matrix[index_b][end] = adjacency_matrix[end][                index_b] = True    for k in range(1, num_nodes + 1):        if seg_int(vertices[start].p, vertices[end].p, vertices[k].p):            adjacency_matrix[start][k] = adjacency_matrix[k][start] = \                adjacency_matrix[end][k] = adjacency_matrix[k][end] = True    edges.append((vertices[start], vertices[end]))for i in range(1, num_nodes + 1):    for j in range(1, num_nodes + 1):        if adjacency_matrix[i][j] and i != j:            vertices[i].neighbors.append(vertices[j])depth_f(vertices[1])if all(node.visited for node in vertices[1:]):    print("YES")else:    print("NO")