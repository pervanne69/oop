import mathclass Vector:    """A class representing a three-dimensional vector."""    def __init__(self, x: float, y: float, z: float):        """        Initializes a Vector object with given x, y, and z components.        :param x: (float) The x-coordinate of the vector.        :param y: (float) The y-coordinate of the vector.        :param z: (float): The z-coordinate of the vector.        """        self.x = x        self.y = y        self.z = z    def dot(self, other_v) -> float:        """        Calculates the dot product of this vector with another vector.        :param other_v: (Vector) The other vector.        :return float: The dot product of the two vectors.        """        return self.x * other_v.x + self.y * other_v.y + self.z * other_v.z    def scale(self, factor):        """        Scales this vector by a given factor.        :param factor: (float) The scaling factor.        :return Vector: The scaled vector.        """        return Vector(self.x * factor, self.y * factor, self.z * factor)    def subtract(self, other_v):        """        Subtracts another vector from this vector.        :param other_v: (Vector) The vector to subtract.        :return Vector: The resulting vector.        """        return Vector(self.x - other_v.x, self.y - other_v.y,                      self.z - other_v.z)    def add(self, other_v):        """        Adds another vector to this vector.        :param other_v: (Vector) The vector to add.        :return  Vector: The resulting vector.        """        return Vector(self.x + other_v.x, self.y + other_v.y,                      self.z + other_v.z)    def cross(self, other_v):        """        Calculates the cross product of this vector with another vector.        :param other_v: (Vector) The other vector.        :return Vector: The cross product vector.        """        return Vector(self.y * other_v.z - self.z * other_v.y,                      self.z * other_v.x - self.x * other_v.z,                      self.x * other_v.y - self.y * other_v.x)    def norm(self) -> float:        """        Calculates the Euclidean norm (length) of this vector.        :return float: The length of the vector.        """        return math.sqrt(self.x * self.x + self.y * self.y + self.z * self.z)    def normalize(self):        """        Normalizes this vector (converts to unit vector).        :return Vector: The normalized vector.        """        eu_norm = self.norm()        return Vector(self.x / eu_norm, self.y / eu_norm, self.z / eu_norm)def angle(x: float) -> float:    """    Computes the angle in radians whose cosine is the given value.    :param x: (float) The cosine value.    :return float: The angle in radians.    """    return math.acos(min(max(-1.0, x), 1.0))a, b = map(int, input().split())v0 = Vector(*map(int, input().split()))v1 = Vector(*map(int, input().split()))pi = math.acos(-1)ini_vec = Vector(0, 0, 0)v = ini_vec.subtract(v0)w = v1.subtract(v0)p = v0.add(w.scale(v.dot(w) / w.dot(w)))r = p.subtract(ini_vec)d = ini_vec.subtract(p).norm()t = angle((b * b - a * a - d * d) / (-2 * a * d))s = angle((d * d - a * a - b * b) / (-2 * a * b))if d > a + b or s < pi / 2 - 1e-9:    print("No solution.")else:    q = (w.cross(r)).normalize()    W = r.normalize().scale(a * math.cos(t)).add(q.scale(a * math.sin(t)))    print(f"{W.x:.20f} {W.y:.20f} {W.z:.20f} {s:.20f}")