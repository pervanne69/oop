import mathclass Vector:    """    Represents a 3D vector.    """    def __init__(self, x, y, z):        """        Initializes a Vector object with given x, y, and z components.        :param x: The x-component of the vector.        :param y: The y-component of the vector.        :param z: The z-component of the vector.        """        self.x = x        self.y = y        self.z = z    def dot_product(self, v):        """        Computes the dot product of this vector with another vector.        :param v: The other vector.        :return: The dot product of the two vectors.        """        return self.x * v.x + self.y * v.y + self.z * v.z    def scale(self, f):        """        Scales the vector by a scalar factor.        :param f: The scalar factor.        :return: A new scaled vector.        """        return Vector(self.x * f, self.y * f, self.z * f)    def subtract(self, v):        """        Computes the difference between this vector and another vector.        :param v: The other vector.        :return: A new vector representing the difference.        """        return Vector(self.x - v.x, self.y - v.y, self.z - v.z)    def add(self, v):        """        Adds another vector to this vector.        :param v: The other vector.        :return: A new vector representing the sum.        """        return Vector(self.x + v.x, self.y + v.y, self.z + v.z)    def cross_product(self, v):        """        Computes the cross product of this vector with another vector.        :param v: The other vector.        :return: A new vector representing the cross product.        """        return Vector(self.y * v.z - self.z * v.y,                      self.z * v.x - self.x * v.z,                      self.x * v.y - self.y * v.x)    def length_squared(self):        """        Computes the squared length of the vector.        :return: The squared length of the vector.        """        return self.x * self.x + self.y * self.y + self.z * self.z    def length(self):        """        Computes the length of the vector.        :return: The length of the vector.        """        return math.sqrt(self.length_squared())    def normalize(self):        """        Normalizes the vector (i.e., makes it unit length).        :return: A new normalized vector.        """        l = self.length()        return Vector(self.x / l, self.y / l, self.z / l)def clamp(x, minimum, maximum):    """    Clamps a value between a minimum and maximum.    :param x: The value to clamp.    :param minimum: The minimum allowed value.    :param maximum: The maximum allowed value.    :return: The clamped value.    """    return max(minimum, min(maximum, x))def angle(x):    """    Computes the arccosine of a value, clamped between -1 and 1.    :param x: The value to compute the arccosine of.    :return: The arccosine of the value.    """    return math.acos(clamp(x, -1.0, 1.0))a, b = map(float, input().split())v0x, v0y, v0z = map(int, input().split())v1x, v1y, v1z = map(float, input().split())v0 = Vector(v0x, v0y, v0z)v1 = Vector(v1x, v1y, v1z)O = Vector(0, 0, 0)v = O.subtract(v0)w = v1.subtract(v0)p = v0.add(w.scale(v.dot_product(w) / w.length_squared()))r = p.subtract(O)d = O.subtract(p).length()t = angle((b * b - a * a - d * d) / (-2 * a * d))s = angle((d * d - a * a - b * b) / (-2 * a * b))if d > a + b or s < math.pi / 2 - 1e-9:    print("No solution.")else:    q = w.cross_product(r).normalize()    W = r.normalize().scale(a * math.cos(t)).add(q.scale(a * math.sin(t)))    print(f"{W.x:.20f} {W.y:.20f} {W.z:.20f} {s:.20f}")