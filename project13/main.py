MOD = 9973pre = [    0, 5392, 1890, 84, 6520, 3149,    2416, 2835, 80, 8614, 742, 7696, 6823, 9492, 7710,    9444, 510, 118, 6522, 3213, 4499, 6178, 4565,    763, 1071, 8875, 2688, 9145, 1211,    9480, 4056, 1817, 8661, 5467, 3358, 2892, 2205, 8691, 1963, 2386, 8401,    1047, 3691, 6824, 825, 7728, 6797,    1720, 8194, 9901, 2823, 1952, 9344, 5022,    1421, 6116, 4511, 1289, 2133, 7494,    7298, 5012, 9638, 8753, 5968, 4029, 4804, 9556,    924, 1497, 5886, 6078, 2085, 3876,    268, 2910, 8962, 2970, 1015, 3931, 1103, 4872,    4054, 346, 1119, 931, 4454, 6530,    1722, 4266, 9888, 7961, 2891, 885, 4461, 7731, 3316,    2155, 93, 2871, 9710]def mod_min(a: int, b: int) -> int:    """    Calculate the minimum modulo between two integers.    :param a: (int): The first integer.    :param b: (int): The second integer.    :return int: The minimum modulo between a and b.    """    res = a - b    return res + MOD if res < 0 else res % MODdef mod_pow(x: int, n: int) -> int:    """    Calculate the modular exponentiation.    :param x: (int) The base.    :param n: (int) The exponent.    :return int: The result of x raised to the power of n modulo MOD.    """    if n == 0:        return 1    return (x * mod_pow(x, n - 1)) % MODdef first_value(x: int) -> int:    """    Calculate the first value of the function g(x, y).    :param x: (int) The input value.    :return int: The result    """    x %= MOD    return mod_min(mod_pow(x, 5), x) + 7def second_value(x: int) -> int:    """    Calculate the second value of the function g(x, y).    :param x: (int) The input value.    :return int: The result    """    x %= MOD    return mod_min((3 * x + mod_pow(x, 3)) % MOD, mod_pow(x, 5)) % MODdef f(n: int) -> int:    """    Calculate the value of the recursive function f(n).    :param n: (int) The input value.    :return int: The result    """    a = 1    total = 0    while n >= 0:        p = first_value(n)        if n == 0 or p == 0:            return total        if (n - 1) % 1000000 == 0:            return (total + a * p % MOD * pre[                (n - 1) // 1000000] % MOD + a * second_value(n) % MOD) % MOD        total = (total + a * second_value(n)) % MOD        a = (p * a) % MOD        n -= 1    return totaldef main() -> None:    """    Main function to read input and print the result.    :return None:    """    n = int(input())    print(f(n))if __name__ == "__main__":    main()