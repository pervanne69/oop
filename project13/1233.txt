def place_value(value: int) -> int:    """    Returns the place value of the least non-zero digit of k.    :param value: (int) The number to evaluate.    :return int: The place value of the least non-zero digit.    """    i = 0    while value:        value //= 10        i += 1    return 10 ** (i - 1)def calc(g_k: int, count_of_am_n: int) -> int:    """    Calculates the number N such that there are    exactly M amusing numbers less than or equal to N,    which end with the digit sequence K.    :param g_k: (int) The given number K.    :param count_of_am_n: (int): Count of amusing numbers to find.    :return int: The number N or 0 if no such number exists.    """    p = [0] * 20    for i in range(19):        p[i] = 10 ** i    n = 0    k = g_k    while k:        n += 1 + (k - place_value(k))        k //= 10    if count_of_am_n < n:        return 0    count_of_am_n -= n    if count_of_am_n:        i = 1        while True:            diff = p[i] * (g_k - place_value(g_k))            if not diff:                return 0            if count_of_am_n <= diff:                return count_of_am_n - 1 + place_value(g_k) * p[i]            count_of_am_n -= diff            i += 1    else:        return g_kdef main() -> None:    """    Main function to read input    and print the result of the calc function.    :return None:    """    k, m = map(int, input().split())    print(calc(k, m))if __name__ == "__main__":    main()