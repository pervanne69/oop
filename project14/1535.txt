from typing import Listdef get_min(n: int) -> List[int]:    """    Generates a sequence of city visits that minimizes the total cost.    :param n: (int) The number of cities.    :return List[int]: The sequence of city visits.    """    v = []    if n % 2 == 1:        up = 2        down = n        for i in range(n - 1):            if i % 2 == 1:                v.append(up)                up += 2            else:                v.append(down)                down -= 2        v.append(1)    else:        down = n        up = 2        i = 0        while up <= down:            if i % 2 == 1:                v.append(up)                up += 2            else:                v.append(down)                down -= 2            i += 1        if n % 4 == 0:            up = n // 2 + 1            down = n // 2 - 1            while len(v) < n:                if up <= n:                    v.append(up)                    up += 2                if down > 0:                    v.append(down)                    down -= 2        else:            v.append(n // 2)            up = n // 2 + 2            down = n // 2 - 2            while len(v) < n:                if up <= n:                    v.append(up)                    up += 2                if down > 0:                    v.append(down)                    down -= 2    return vdef get_max(n: int) -> List[int]:    """    Generates a sequence of city visits that maximizes the total cost.    :param n: (int) The number of cities.    :return List[int]: The sequence of city visits.    """    v = []    for i in range(1, n + 1, 2):        v.append(i)    for i in range(n if n % 2 == 0 else n - 1, 0, -2):        v.append(i)    return vdef print_sequence(seq: List[int]) -> None:    """    Prints the sequence of city visits starting from city 1.    :param seq: (List[int]) The sequence of city visits.    :return None:    """    start_index = seq.index(1)    for i in range(len(seq)):        print(seq[(start_index + i) % len(seq)], end=" ")    print()def main() -> None:    """    Main function to read input, generate sequences for    minimum and maximum cost, and print the sequences.    :return None:    """    n = int(input().strip())    min_sequence = get_min(n)    max_sequence = get_max(n)    print_sequence(min_sequence)    print_sequence(max_sequence)if __name__ == "__main__":    main()